{"version":3,"sources":["actions.js","TileView.js","EdgeView.js","VertexView.js","GameBoard.js","GameContainer.js","App.js","serviceWorker.js","store.js","index.js"],"names":["newGame","text","type","visitVertex","id","resetLevel","TileView","_this$props","this","props","tile","tileState","tileSize","edgeSize","classes","tileType","valid","symbol","push","react_default","a","createElement","className","join","style","width","height","left","x1","top","y1","color","Component","EdgeView","edge","edgeState","x2","visited","broken","VertexView","vertex","vertexState","vertexType","x","y","GameBoard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onMouseDown","bind","assertThisInitialized","onMouseMove","onMouseUp","state","dragging","div","addEventListener","passive","e","position","target","level","targetTouches","preventDefault","nativeEvent","clientX","offsetLeft","clientY","offsetTop","col","Math","round","row","console","log","rows","cols","_this$props2","_this2","_this$props3","boardSize","vMargin","hMargin","tiles","overlay","completed","won","ref","marginTop","marginBottom","marginLeft","marginRight","map","t","i","src_TileView","key","edges","src_EdgeView","edgeId","vertices","v","src_VertexView","vertexId","connect","dispatch","Actions","GameContainer","updateSize","r","getBoundingClientRect","min","setState","window","removeEventListener","_this$state","prevLevel","nextLevel","onClick","src_GameBoard","assign","levelId","setTimeout","App","src_GameContainer","Boolean","location","hostname","match","tileTypes","blank","validate","paired","place","regions","availableColors","random","sort","b","colorCount","length","floor","_loop","availableRegions","toConsumableArray","keys","filter","regionId","region","some","regionCount","j","ri","splice","k","availableTiles","tileId","otherTile","sameColor","unclaimedRegions","maxInRegion","ceil","countInRegion","conflicts","neighbouringVertices","getVisitedEdges","path","visitedEdges","pi1","indexOf","pi2","abs","expandRegion","startTile","unmatchedTiles","neighbours","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","calculateRegions","generateLevel","name","topEdge","y2","leftEdge","entries","exits","solution","randomPath","nextPoints","foundSolution","shouldBacktrack","nextVertexId","concat","solutionRegion","breaks","_arr","_i7","initialState","objectSpread","reducer","combineReducers","arguments","action","lastVertexId","backtrackVertexId","findIndex","pop","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","tv","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7f2a7a8.chunk.js","sourcesContent":["export const newGame = text => ({\n    type: 'NEW_GAME',\n    text\n});\n\nexport const visitVertex = id => ({\n    type: 'VISIT_VERTEX',\n    id\n});\n\nexport const resetLevel = id => ({\n    type: 'RESET_LEVEL',\n    id\n});","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass TileView extends Component {\n    render() {\n        let {tile, tileState, tileSize, edgeSize} = this.props;\n        let classes = [\"tile\", tile.tileType, tileState.valid ? \" valid\" : \" invalid\"];\n        if (tile.symbol) {\n            classes.push(\"symbol\")\n            classes.push(\"symbol-\"+tile.symbol);\n        }\n        return (\n            <div className={classes.join(\" \")} style={{\n                width: tileSize,\n                height: tileSize,\n                left: (tile.x1 * (tileSize + edgeSize)),\n                top: (tile.y1 * (tileSize + edgeSize)),\n                color: tile.color || \"black\"\n            }}>\n            </div>\n        );\n    }\n}\n\nTileView.propTypes = {\n    tile: PropTypes.shape({\n        tileType: PropTypes.string.isRequired,\n        x1: PropTypes.number.isRequired,\n        y1: PropTypes.number.isRequired,\n    }).isRequired,\n    tileState: PropTypes.shape({\n        valid: PropTypes.bool.isRequired,\n    }).isRequired,\n    tileSize: PropTypes.number.isRequired,\n    edgeSize: PropTypes.number.isRequired,\n};\n\n\nexport default TileView;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass EdgeView extends Component {\n    render() {\n        let {edge, edgeState, tileSize, edgeSize} = this.props;\n        if (edge.x1 === edge.x2) {\n            // vertical\n            return (\n                <div className={\"edge vertical\" + (edgeState.visited ? \" visited\" : \"\") + (edge.broken ? \" broken\" : \"\")} style={{\n                    width: edgeSize,\n                    height: tileSize,\n                    left: (edge.x1 * (tileSize + edgeSize) - edgeSize),\n                    top: (edge.y1 * (tileSize + edgeSize))\n                }}>\n                </div>\n            );\n        }\n        else {\n            return (\n                <div className={\"edge horizontal\" + (edgeState.visited ? \" visited\" : \"\") + (edge.broken ? \" broken\" : \"\")} style={{\n                    width: tileSize,\n                    height: edgeSize,\n                    left: (edge.x1 * (tileSize + edgeSize)),\n                    top: (edge.y1 * (tileSize + edgeSize) - edgeSize)\n                }}>\n                </div>\n            );\n        }\n    }\n}\n\nEdgeView.propTypes = {\n    edge: PropTypes.shape({\n        x1: PropTypes.number.isRequired,\n        y1: PropTypes.number.isRequired,\n        broken: PropTypes.bool.isRequired,\n    }).isRequired,\n    tileSize: PropTypes.number.isRequired,\n    edgeSize: PropTypes.number.isRequired,\n    edgeState: PropTypes.shape({\n        visited: PropTypes.bool.isRequired\n    }).isRequired\n};\n\nexport default EdgeView;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass VertexView extends Component {\n    render() {\n        let {vertex, vertexState, tileSize, edgeSize} = this.props;\n        if (vertex.vertexType === \"entry\") {\n            return (\n                <div className={'vertex ' + (vertex.vertexType || \"\") + (vertexState.visited ? \" visited\" : \"\")} style={{\n                    width: edgeSize * 3,\n                    height: edgeSize * 3,\n                    left: (vertex.x * (tileSize + edgeSize) - edgeSize - edgeSize),\n                    top: (vertex.y * (tileSize + edgeSize) - edgeSize - edgeSize)\n                }}>\n                </div>\n            );\n        }\n        else if (vertex.vertexType === \"exit\") {\n            return (\n                <div className={'vertex ' + (vertex.vertexType || \"\") + (vertexState.visited ? \" visited\" : \"\")} style={{\n                    width: edgeSize * 3,\n                    height: edgeSize * 3,\n                    left: (vertex.x * (tileSize + edgeSize) - edgeSize - edgeSize),\n                    top: (vertex.y * (tileSize + edgeSize) - edgeSize - edgeSize)\n                }}>\n                </div>\n            );\n        }\n        else {\n            return (\n                <div className={'vertex ' + (vertex.vertexType || \"\") + (vertexState.visited ? \" visited\" : \"\")} style={{\n                    width: edgeSize,\n                    height: edgeSize,\n                    left: (vertex.x * (tileSize + edgeSize) - edgeSize),\n                    top: (vertex.y * (tileSize + edgeSize) - edgeSize)\n                }}>\n\n                </div>\n            );\n        }\n\n    }\n}\n\nVertexView.propTypes = {\n    vertex: PropTypes.shape({\n        vertexType: PropTypes.string.isRequired,\n        x: PropTypes.number.isRequired,\n        y: PropTypes.number.isRequired,\n    }).isRequired,\n    tileSize: PropTypes.number.isRequired,\n    edgeSize: PropTypes.number.isRequired,\n    vertexState: PropTypes.shape({\n        visited: PropTypes.bool.isRequired\n    }).isRequired\n};\n\nexport default VertexView;","import { connect } from 'react-redux';\nimport * as Actions from './actions';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TileView from './TileView';\nimport EdgeView from './EdgeView';\nimport VertexView from './VertexView';\n\nclass GameBoard extends Component {\n    constructor() {\n        super();\n        this.onMouseDown = this.onMouseDown.bind(this);\n        this.onMouseMove = this.onMouseMove.bind(this);\n        this.onMouseUp = this.onMouseUp.bind(this);\n        this.state = {};\n        this.dragging = false;\n    }\n    componentDidMount() {\n        this.div.addEventListener(\"touchstart\", this.onMouseDown);\n        this.div.addEventListener(\"touchmove\", this.onMouseMove, {passive: false});\n        this.div.addEventListener(\"touchend\", this.onMouseUp);\n    }\n    onMouseDown(e) {\n        this.dragging = true;\n    }\n    onMouseMove(e) {\n        if (!this.dragging) return;\n        let {level, visitVertex, tileSize, edgeSize} = this.props;\n        let position, target;\n        if (e.targetTouches) {\n            position = e.targetTouches[0];\n            target = e.target;\n            e.preventDefault();\n        }\n        else {\n            position = e.nativeEvent;\n            target = e.nativeEvent.target;\n        }\n        if (!position || !target) return;\n\n        let x = (position.clientX - target.offsetLeft);\n        let y = (position.clientY - target.offsetTop);\n\n        // find nearest vertex\n\n        let col = Math.round(x / (tileSize + edgeSize)) - 1;\n        let row = Math.round(y / (tileSize + edgeSize)) - 1;\n        console.log(x + \", \" + y + \" => \" + col + \", \" + row);\n\n        if (col >= 0 && row >= 0 && row <= level.rows && col <= level.cols) {\n            let vertexId = row * (level.cols + 1) + col;\n            visitVertex(vertexId);\n        }\n    }\n    onMouseUp(e) {\n        if (!this.dragging) return;\n        this.dragging = false;\n        let {level, visitVertex, tileSize, edgeSize} = this.props;\n\n        let position, target;\n        if (e.targetTouches) {\n            position = e.targetTouches[0];\n            target = e.target;\n        }\n        else {\n            position = e.nativeEvent;\n            target = e.nativeEvent.target;\n        }\n        if (!position || !target) return;\n\n        let x = (position.clientX - target.offsetLeft);\n        let y = (position.clientY - target.offsetTop);\n\n        // find nearest vertex\n\n        let col = Math.round(x / (tileSize + edgeSize)) - 1;\n        let row = Math.round(y / (tileSize + edgeSize)) - 1;\n        console.log(x + \", \" + y + \" => \" + col + \", \" + row);\n\n        if (col >= 0 && row >= 0 && row <= level.rows && col <= level.cols) {\n            let vertexId = row * (level.cols + 1) + col;\n            visitVertex(vertexId);\n        }\n    }\n    render() {\n        let {level, tileSize, edgeSize, boardSize, vMargin, hMargin} = this.props;\n        if (!level || !level.tiles || !level.tiles[0]) {\n            return (\n                <div className=\"board\">\n          No game loaded;\n                </div>\n            );\n        }\n        else {\n            let overlay = null;\n            if (level.completed && !level.won) {\n                overlay = (\n                    <div className=\"boardOverlay\">\n\n                    </div>\n                );\n            }\n            else if (level.completed && level.won) {\n                overlay = (\n                    <div className=\"boardOverlay\">\n\n                    </div>\n                );\n            }\n            return (\n                <div\n                    className={\"board \" + (level.completed ? \" completed\" : \"\") + (level.won ? \" won\" : \"\") }\n                    ref={e => (this.div = e)}\n                    onMouseDown={this.onMouseDown}\n                    onMouseMove={this.onMouseMove}\n                    onMouseUp={this.onMouseUp}\n                    style={{\n                        marginTop: vMargin,\n                        marginBottom: vMargin,\n                        marginLeft: hMargin,\n                        marginRight: hMargin,\n                        width: boardSize,\n                        height: boardSize\n                    }}\n                >\n                    {level.tiles.map((t, i) => (<TileView\n                        key={i}\n                        tile={t}\n                        tileState={level.tileState[i]}\n                        tileSize={tileSize}\n                        edgeSize={edgeSize} />))}\n                    {level.edges.map((e, i) => (<EdgeView\n                        key={i}\n                        edge={e}\n                        edgeId={i}\n                        edgeState={level.edgeState[i]}\n                        tileSize={tileSize}\n                        edgeSize={edgeSize} />))}\n                    {level.vertices.map((v, i) => (<VertexView\n                        key={i}\n                        vertex={v}\n                        vertexId={i}\n                        vertexState={level.vertexState[i]}\n                        tileSize={tileSize}\n                        edgeSize={edgeSize} />))}\n                    {overlay}\n                </div>\n            );\n        }\n    }\n}\n\nGameBoard.propTypes = {\n    level: PropTypes.shape({\n\n    }).isRequired,\n    resetLevel: PropTypes.func.isRequired,\n    newGame: PropTypes.func.isRequired,\n    visitVertex: PropTypes.func.isRequired,\n    tileSize: PropTypes.number.isRequired,\n    edgeSize: PropTypes.number.isRequired,\n    boardSize: PropTypes.number.isRequired\n};\n\nexport default connect(\n    state => ({\n        // level: state.level,\n    }),\n    dispatch => ({\n        resetLevel: id => dispatch(Actions.resetLevel(id)),\n        newGame: id => dispatch(Actions.newGame(id)),\n        visitVertex: id => dispatch(Actions.visitVertex(id))\n    })\n)(GameBoard);","import { connect } from 'react-redux';\nimport * as Actions from './actions';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport GameBoard from './GameBoard';\n\nclass GameContainer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            tileSize: 50,\n            edgeSize: 10\n        };\n        this.updateSize = this.updateSize.bind(this);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (!state.level || !props.level) {\n            return {\n                nextLevel: null,\n                level: props.level,\n                prevLevel: null\n            };\n        }\n\n        if (state.level && props.level && state.level.levelId !== props.level.levelId) {\n            // resetting to new level\n            console.log(\"resetting\");\n            return {\n                nextLevel: props.level,\n                level: null,\n                prevLevel: state.level\n            };\n        }\n\n        if (!state.level.completed && props.level.completed) {\n            if (props.level.won) {\n                setTimeout(() => props.newGame(), 500);\n            }\n            else {\n                setTimeout(() => props.resetLevel(), 1000);\n            }\n        }\n\n        return {\n            nextLevel: null,\n            level: props.level,\n            prevLevel: null\n        };\n    }\n    updateSize() {\n        if (!this.div) return;\n        let r = this.div.getBoundingClientRect();\n        console.log(r);\n        let boardSize = Math.min(r.width, r.height) - 20;\n        let edgeSize = boardSize / 60\n        let tileSize = (boardSize / (this.props.level.cols+2))-edgeSize;\n        this.setState({\n            boardSize: boardSize,\n            vMargin: (r.height - boardSize) / 2,\n            hMargin: (r.width - boardSize) / 2,\n            tileSize: tileSize,\n            edgeSize: edgeSize\n        })\n    }\n    componentDidMount() {\n        this.updateSize();\n        window.addEventListener(\"resize\", this.updateSize);\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateSize);\n    }\n    render() {\n        let {level, prevLevel, nextLevel, tileSize, edgeSize, boardSize, vMargin, hMargin} = this.state;\n        return (\n            <div className=\"boardcontainer\" ref={e => (this.div = e)} onClick={this.onClick}>\n                {(prevLevel ? (<div className=\"prevLevel\"><GameBoard level={prevLevel} {...{tileSize, edgeSize, boardSize, vMargin, hMargin}} /></div>) : null)}\n                {(level ? (<div className=\"currentLevel\"><GameBoard level={level} {...{tileSize, edgeSize, boardSize, vMargin, hMargin}} /></div>) : null)}\n                {(nextLevel ? (<div className=\"nextLevel\"><GameBoard level={nextLevel} {...{tileSize, edgeSize, boardSize, vMargin, hMargin}} /></div>) : null)}\n\n            </div>\n        );\n\n    }\n}\n\nGameContainer.propTypes = {\n    level: PropTypes.shape({\n    }),\n};\n\nexport default connect(\n    state => ({\n        level: state.level,\n    }),\n    dispatch => ({\n        resetLevel: id => dispatch(Actions.resetLevel(id)),\n        newGame: id => dispatch(Actions.newGame(id)),\n        visitVertex: id => dispatch(Actions.visitVertex(id))\n    })\n)(GameContainer);","import React, { Component } from 'react';\nimport './App.css';\nimport GameContainer from './GameContainer';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\" style={{\n            }}>\n                <GameContainer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import { combineReducers } from 'redux';\n\n\nconst tileTypes = {\n    blank: {\n        validate: () => true\n    },\n    paired: {\n        place: (regions, tiles) => {\n            console.log(\"placing paired tiles\");\n            // at least two colors, up to the number of regions\n            let availableColors = [\"black\", \"white\", \"orange\", \"blue\", \"green\", \"purple\", \"yellow\"]\n                .map((a) => [Math.random(), a])\n                .sort((a, b) => a[0] - b[0])\n                .map((a) => a[1]);\n            let colorCount = Math.min(availableColors.length, Math.floor(Math.random() * (regions.length - 2) + 2));\n\n            for (let i = 0; i < colorCount; i++) {\n                let color = availableColors[i];\n                let availableRegions = [...regions.keys()].filter(regionId => {\n                    let region = regions[regionId];\n                    // reject regions which already contain a pair\n                    if (region.some(id => {\n                        return tiles[id].tileType === \"paired\" && tiles[id].color === color;\n                    })) return false;\n                    // need at least two free tiles\n                    if (region.filter(id => {\n                        return tiles[id].tileType === \"blank\";\n                    }).length < 2) return false;\n                    return true;\n                });\n\n                let regionCount = Math.min(availableRegions.length, Math.floor(Math.random() * (regions.length - 2) + 2));\n\n                for (let j = 0; j < regionCount; j++) {\n                    if (availableRegions.length === 0) continue;\n\n                    let ri = Math.floor(Math.random() * availableRegions.length);\n                    let regionId = availableRegions[ri];\n                    availableRegions.splice(ri, 1);\n                    let region = regions[regionId];\n                    for (let k = 0; k < 2; k++) {\n                        let availableTiles = region.filter(id => {\n                            return tiles[id].tileType === \"blank\";\n                        });\n                        let tile = tiles[availableTiles[Math.floor(Math.random() * availableTiles.length)]];\n                        tile.tileType = \"paired\";\n                        tile.color = color;\n                        tile.symbol = \"diamond\";\n                    }\n                }\n            }\n        },\n        validate: (tileId, region, tiles, tileState) => {\n            let tile = tiles[tileId];\n            let matchesInRegion = region.filter(id => {\n                let otherTile = tiles[id];\n                if (tile.tileType === otherTile.tileType && tile.color === otherTile.color) {\n                    return true;\n                }\n                return false;\n            });\n            return matchesInRegion.length === 2;\n        }\n    },\n    sameColor: {\n        place: (regions, tiles) => {\n            console.log(\"placing sameColor tiles\");\n            // at least two colors, up to the number of regions\n            let availableColors = [\"black\", \"white\", \"orange\", \"blue\", \"green\", \"purple\", \"yellow\"]\n                .map((a) => [Math.random(), a])\n                .sort((a, b) => a[0] - b[0])\n                .map((a) => a[1]);\n            let colorCount = Math.min(availableColors.length, Math.floor(Math.random() * (regions.length - 2) + 2));\n\n            console.log(\"placing sameColor tiles - \" + colorCount);\n\n            let unclaimedRegions = [...regions.keys()];\n            for (let i = 0; i < colorCount; i++) {\n                let ri = Math.floor(Math.random() * unclaimedRegions.length);\n                let regionId = unclaimedRegions[ri];\n                unclaimedRegions.splice(ri, 1);\n                let region = regions[regionId];\n                let maxInRegion = Math.ceil(region.length / 2);\n                let minInRegion = 1;\n                let countInRegion = Math.floor(Math.random() * (maxInRegion - minInRegion) + minInRegion);\n                for (let j = 0; j < countInRegion; j++) {\n                    let tile = tiles[region[Math.floor(Math.random() * region.length)]];\n                    if (tile.tileType !== \"blank\") continue;\n                    tile.tileType = \"sameColor\";\n                    tile.color = availableColors[i];\n                    tile.symbol = \"drop\"\n                }\n\n            }\n\n        },\n        validate: (tileId, region, tiles, tileState) => {\n            let tile = tiles[tileId];\n            let conflicts = region.filter(id => {\n                if (id === tileId) return false;\n                let otherTile = tiles[id];\n                if (tile.tileType === otherTile.tileType && tile.color !== otherTile.color) {\n                    return true;\n                }\n                return false;\n            });\n            if (conflicts.length > 0) {\n                console.log(\"failed on tile \" + tileId);\n                console.log(tile);\n                console.log(region);\n                console.log(conflicts);\n                console.log(tiles[conflicts[0]]);\n\n            }\n            return conflicts.length === 0;\n        }\n    }\n};\n\nfunction neighbouringVertices(vertexId, edges) {\n    return edges.filter((e, i) => {\n        if (e.vertices.length < 2) return false;\n        if (e.vertices[0] === vertexId || e.vertices[1] === vertexId) return true;\n        else return false;\n    }).map((e, i) => {\n        if (e.vertices[0] === vertexId) return e.vertices[1];\n        else return e.vertices[0];\n    });\n}\n\nfunction getVisitedEdges(path, edges) {\n    let visitedEdges = [];\n    for (let i = 0; i < edges.length; i++) {\n        let pi1 = path.indexOf(edges[i].vertices[0]);\n        let pi2 = path.indexOf(edges[i].vertices[1]);\n        if (pi1 >= 0 && pi2 >= 0 && Math.abs(pi2 - pi1) === 1) {\n            visitedEdges.push(i);\n        }\n    }\n    return visitedEdges;\n}\n\n\nfunction expandRegion(startTile, region, unmatchedTiles, tiles, edges, visitedEdges) {\n    unmatchedTiles.splice(unmatchedTiles.indexOf(startTile), 1);\n    region.push(startTile);\n    let neighbours = edges.filter((e, i) => {\n        if (e.tiles.length < 2) return false;\n        if (visitedEdges.indexOf(i) >= 0) return false;\n        let otherTile;\n        if (e.tiles[0] === startTile) otherTile = e.tiles[1];\n        else if (e.tiles[1] === startTile) otherTile = e.tiles[0];\n        else return false;\n        if (unmatchedTiles.indexOf(otherTile) < 0) return false;\n        return true;\n    }).map((e, i) => {\n        if (e.tiles[0] === startTile) return e.tiles[1];\n        else return e.tiles[0];\n    });\n    for (let t of neighbours) {\n    // tile may have matched since the filtering step\n        if (unmatchedTiles.indexOf(t) < 0) continue;\n        expandRegion(t, region, unmatchedTiles, tiles, edges, visitedEdges);\n    }\n}\n\nfunction calculateRegions(tiles, edges, visitedEdges) {\n    let unmatchedTiles = tiles.map((e, i) => i);\n    let regions = [];\n    while (unmatchedTiles.length > 0) {\n        let region = [];\n        expandRegion(unmatchedTiles[0], region, unmatchedTiles, tiles, edges, visitedEdges);\n        regions.push(region);\n    }\n\n    return regions;\n}\n\n\nfunction randomPath(path, vertices, edges, tiles) {\n    if (vertices[path[path.length - 1]].vertexType === \"exit\") {\n    // this may be a valid solution\n        let visitedEdges = getVisitedEdges(path, edges);\n\n        let solution = {\n            path: path,\n            length: path.length,\n            regions: calculateRegions(tiles, edges, visitedEdges),\n            edges: visitedEdges\n\n        };\n        if (solution.regions.length < 4) return null;\n        return solution;\n    }\n\n    // otherwise, see if a random edge leads to a solution\n\n    // all unvisited neighbours\n    let nextPoints = vertices[path[path.length - 1]].neighbours.filter(v => path.indexOf(v) < 0);\n    if (nextPoints.length === 0) {\n    // dead end\n        return null;\n    }\n    let shouldBacktrack = Math.random() > 0.5 && path.length > 1;\n    let foundSolution;\n\n    while (!shouldBacktrack && !foundSolution) {\n        let nextVertexId = nextPoints[Math.floor(Math.random() * nextPoints.length)];\n        let newPath = [...path, nextVertexId];\n        foundSolution = randomPath(newPath, vertices, edges, tiles);\n        if (foundSolution) return foundSolution;\n        shouldBacktrack = Math.random() > 0.5 && path.length > 1;\n    }\n    return null;\n}\n\n\nfunction generateLevel(rows, cols) {\n    let level = {\n        name: \"Generated Level\",\n        levelId: Math.floor(Math.random() * 10000000),\n        rows: rows,\n        cols: cols,\n        // 8x8\n        tiles: [],\n        // 8h, 9v\n        edges: [],\n        // 9x9\n        vertices: [],\n        path: [],\n        completed: false,\n        won: false,\n    };\n\n    for (let i = 0; i <= rows; i++) {\n        for (let j = 0; j <= cols; j++) {\n            let vertex = {\n                x: j + 1,\n                y: i + 1,\n                vertexType: \"standard\"\n            };\n            level.vertices.push(vertex);\n        }\n    }\n\n    for (let row = 0; row <= rows; row++) {\n    // add top edge\n        for (let col = 0; col < cols; col++) {\n            let topEdge = {\n                x1: col + 1,\n                y1: row + 1,\n                x2: col + 2,\n                y2: row + 1,\n                broken: false,\n                tiles: [],\n                vertices: [\n                    (row) * (cols + 1) + col,\n                    (row) * (cols + 1) + col + 1]\n            };\n            if (row > 0) {\n                topEdge.tiles.push((row - 1) * cols + col);\n            }\n            if (row < rows) {\n                topEdge.tiles.push((row) * cols + col);\n            }\n            level.edges.push(topEdge);\n        }\n\n        // add left side if not below last row\n        if (row < rows) {\n            for (let col = 0; col <= cols; col++) {\n                let leftEdge = {\n                    x1: col + 1,\n                    y1: row + 1,\n                    x2: col + 1,\n                    y2: row + 2,\n                    broken: false,\n                    tiles: [],\n                    vertices: [\n                        (row) * (cols + 1) + col,\n                        (row + 1) * (cols + 1) + col]\n                };\n                if (col > 0) {\n                    leftEdge.tiles.push((row) * cols + col - 1);\n                }\n                if (col < cols) {\n                    leftEdge.tiles.push((row) * cols + col);\n                }\n                level.edges.push(leftEdge);\n            }\n        }\n    }\n\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            let tile = {\n                tileType: \"blank\",\n                x1: j + 1,\n                y1: i + 1,\n                x2: j + 2,\n                y2: i + 2\n            };\n            level.tiles.push(tile);\n        }\n    }\n\n\n    for (let i = 0; i < level.vertices.length; i++) {\n        level.vertices[i].neighbours = neighbouringVertices(i, level.edges);\n    }\n\n\n    // add an entry\n    let entries = [Math.floor((rows + 1) * (cols + 1) - cols / 2 - 1)];\n\n    for (let i = 0; i < entries.length; i++) {\n        level.vertices[entries[i]].vertexType = \"entry\";\n    }\n\n\n    // add an exit\n    let exits = [Math.floor(cols / 2)];\n\n    for (let i = 0; i < exits.length; i++) {\n        level.vertices[exits[i]].vertexType = \"exit\";\n    }\n\n\n    // let solutions = [];\n\n\n    //  for (let i = 0; i < entries.length; i++) {\n    //    extendPath([entries[i]], level.vertices, level.edges, solutions)\n    //  }\n\n    let solution = randomPath([entries[0]], level.vertices, level.edges, level.tiles);\n\n    for (let i = 0; i < solution.regions.length; i++) {\n        for (let j = 0; j < solution.regions[i].length; j++) {\n            level.tiles[solution.regions[i][j]].solutionRegion = i;\n        }\n    }\n\n    let minBreaks = 5;\n    let maxBreaks = 20;\n    let breaks = Math.floor(Math.random() * (maxBreaks - minBreaks) + minBreaks);\n    // add random broken edges\n    for (let i = 0; i < breaks; i++) {\n        let edgeId = Math.floor(Math.random() * level.edges.length);\n        if (solution.edges.indexOf(edgeId) >= 0) continue;\n        console.log(\"breaking edge \" + edgeId);\n        level.edges[edgeId].broken = true;\n    }\n\n    // add tiles\n\n    for (let tileType of [\"paired\", \"sameColor\"]) {\n        tileTypes[tileType].place(solution.regions, level.tiles);\n    }\n\n    level.edgeState = level.edges.map(e => ({\n        visited: false\n    }));\n\n    level.vertexState = level.vertices.map(e => ({\n        visited: false\n    }));\n\n    level.tileState = level.tiles.map(e => ({\n        valid: true\n    }));\n\n    level.regions = [level.tiles.map((e, i) => (i))];\n\n    // for testing\n\n    level.vertexState[entries[0]].visited = true;\n    level.path = [entries[0]];\n    level.solution = solution;\n    level.entries = entries;\n    level.exits = exits;\n\n    return level;\n}\n\n\nexport const initialState = {\n    level: {\n        ...generateLevel(6, 6),\n    }\n};\n\nconst level = (state = initialState.level, action) => {\n    console.log(action.type);\n\n    switch (action.type) {\n    case 'NEW_GAME':\n        return {\n            ...state,\n            ...generateLevel(6, 6)\n        };\n    case 'RESET_LEVEL':\n        return {\n            ...state,\n            edgeState: state.edges.map(e => ({\n                visited: false\n            })),\n\n            vertexState: state.vertices.map((e,i) => ({\n                visited: i === state.entries[0]\n            })),\n\n            tileState: state.tiles.map(e => ({\n                valid: true\n            })),\n\n            regions: [state.tiles.map((e, i) => (i))],\n\n            path: [state.entries[0]],\n\n            completed: false,\n\n            won: false,\n\n        };\n    case 'VISIT_VERTEX': {\n        console.log(action.type);\n        console.log(action.id);\n        let vertexId = action.id;\n        let vertexState = [...state.vertexState];\n        vertexState[vertexId] = {...vertexState[vertexId]};\n        let vertex = state.vertices[vertexId];\n        let path = [...state.path];\n        let completed = false;\n        let won = false;\n\n        if (!vertex) return state;\n        // no need to keep going once completed\n        if (state.completed) return state;\n\n        let lastVertexId = path[path.length - 1];\n        let backtrackVertexId = path[path.length - 2];\n\n        let edgeId = state.edges.findIndex(e => {\n            return e.vertices.indexOf(vertexId) >= 0\n          && e.vertices.indexOf(lastVertexId) >= 0\n          && !e.broken;\n        });\n        let edge = state.edges[edgeId];\n        console.log(\"Found edge \" + edgeId);\n        console.log(edge);\n\n        // if path is empty, must visit a start point\n        if (path.length === 0 && vertex.vertexType !== \"entry\") {\n            return state;\n        }\n        // if path has only entry point, visiting another entry starts a new path\n        else if (path.length === 1 && vertex.vertexType === \"entry\") {\n            path = [vertexId];\n            vertexState = state.vertices.map(e => ({\n                visited: false\n            }));\n            vertexState[vertexId].visited = true;\n        }\n        // restart level by visiting entry point when not on a neighbouring vertex\n        else if (vertex.vertexType === \"entry\" && !edge) {\n            path = [vertexId];\n            vertexState = state.vertices.map(e => ({\n                visited: false\n            }));\n            vertexState[vertexId].visited = true;\n        }\n        // backtrack\n        else if (vertexId === backtrackVertexId) {\n            vertexState[path.pop()] = {\n                visited: false\n            };\n        }\n        else if (vertexState[vertexId].visited) {\n        // can't visit twice\n            return state;\n        }\n        else if (path.length > 0 && !edge) {\n        // no valid edge\n            return state;\n        }\n        else {\n        // visiting a new vertex\n            vertexState[vertexId].visited = true;\n            path.push(vertexId);\n            if (vertex.vertexType === \"exit\") {\n                // level completed - check if won\n                completed = true;\n            }\n\n        }\n\n\n\n        let visitedEdges = getVisitedEdges(path, state.edges);\n        let edgeState = state.edgeState.map((e, i) => {\n            if (visitedEdges.indexOf(i) >= 0) {\n                return {\n                    visited: true\n                };\n            }\n            else {\n                return {\n                    visited: false\n                };\n            }\n        });\n\n        let regions = calculateRegions(state.tiles, state.edges, visitedEdges);\n        //console.log(\"Current regions: \")\n        //console.log(regions);\n        // now validate the regions against the rules for each file\n        won = true;\n\n        let tileState = state.tiles.map((t, i) => {\n            return {\n                ...state.tileState[i],\n                valid: true\n            };\n        });\n\n        for (let i = 0; i < regions.length; i++) {\n        // validate each region's tiles. if any is invalid, mutate tileState and set won to false;\n            for (let t of regions[i]) {\n                tileState[t].region = i;\n                let tv = tileTypes[state.tiles[t].tileType].validate(t, regions[i], state.tiles, tileState);\n                if (!tv) won = false;\n                tileState[t].valid = tv;\n            }\n        }\n\n\n        let newState = {\n            ...state,\n            vertexState,\n            edgeState,\n            tileState,\n            path,\n            completed,\n            won,\n            regions\n        };\n        return newState;\n    }\n    default:\n        return state;\n    }\n};\n\nexport const reducer = combineReducers({\n    level\n});\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { reducer } from './store';\n\nconst store = createStore(reducer);\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}