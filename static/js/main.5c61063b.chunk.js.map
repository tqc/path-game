{"version":3,"sources":["actions.js","TileView.js","EdgeView.js","VertexView.js","GameBoard.js","GameContainer.js","GameMenu.js","RulesPage.js","LevelSelect.js","App.js","serviceWorker.js","game.js","store.js","index.js"],"names":["newGame","text","type","visitVertex","id","resetLevel","TileView","Component","render","this","props","tile","tileState","tileSize","edgeSize","classes","tileType","valid","symbol","push","className","join","style","width","height","left","x1","top","y1","color","EdgeView","edge","edgeState","x2","visited","broken","VertexView","vertex","vertexState","vertexType","x","y","GameBoard","constructor","super","onMouseDown","bind","onMouseMove","onMouseUp","state","dragging","componentDidMount","div","addEventListener","passive","e","position","target","level","targetTouches","preventDefault","nativeEvent","clientX","offsetLeft","clientY","offsetTop","col","Math","round","row","console","log","rows","cols","boardSize","vMargin","hMargin","tiles","overlay","completed","won","ref","marginTop","marginBottom","marginLeft","marginRight","map","t","i","edges","edgeId","vertices","v","vertexId","connect","dispatch","Actions","GameContainer","updateSize","levelId","nextLevel","prevLevel","setTimeout","r","getBoundingClientRect","min","setState","window","componentWillUnmount","removeEventListener","onClick","GameMenu","showLevelSelect","showRules","progress","currentDifficulty","TileDescription","tileSpec","updateTileDescription","value","description","onChange","placeholder","RulesPage","hideRules","visible","maxWidth","margin","tileTypes","rulesShown","setCurrentDifficulty","difficulty","selected","UnlockRow","winsToNextUnlock","maxDifficulty","LevelSelect","hideLevelSelect","levelSelectShown","val","App","loadProgress","progressString","localStorage","getItem","JSON","parse","Boolean","location","hostname","match","blank","validate","paired","generateSubtype","groupSize","floor","random","place","regions","availableColors","a","sort","b","colorCount","length","availableRegions","keys","filter","regionId","region","some","regionCount","j","ri","splice","k","availableTiles","tileId","otherTile","sameColor","unclaimedRegions","maxInRegion","ceil","minInRegion","countInRegion","conflicts","allSymbols","neighbouringVertices","getVisitedEdges","path","visitedEdges","pi1","indexOf","pi2","abs","expandRegion","startTile","unmatchedTiles","neighbours","calculateRegions","randomPath","solution","nextPoints","foundSolution","shouldBacktrack","nextVertexId","generateLevel","name","topEdge","y2","leftEdge","entries","exits","solutionRegion","breaks","generateTileType","usedSymbols","availableSymbols","s","availableTypes","Object","initialProgress","initialState","persistProgress","setItem","stringify","store","createStore","action","lastVertexId","backtrackVertexId","findIndex","pop","tv","newState","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c61063b.chunk.js","sourcesContent":["\nexport const requestProgress = text => ({\n    type: 'REQUEST_PROGRESS',\n    text\n});\n\nexport const receiveProgress = progress => ({\n    type: 'RECEIVE_PROGRESS',\n    progress\n});\n\nexport function loadProgress() {\n    return function(dispatch) {\n        let progressString = localStorage.getItem('progress');\n        let progress = progressString ? JSON.parse(progressString) : null;\n\n        dispatch(receiveProgress(progress));\n    };\n}\n\n\nexport const newGame = text => ({\n    type: 'NEW_GAME',\n    text\n});\n\nexport const visitVertex = id => ({\n    type: 'VISIT_VERTEX',\n    id\n});\n\nexport const resetLevel = id => ({\n    type: 'RESET_LEVEL',\n    id\n});\n\nexport const showLevelSelect = id => ({\n    type: 'SHOW_LEVEL_SELECT',\n    id\n});\n\nexport const hideLevelSelect = id => ({\n    type: 'HIDE_LEVEL_SELECT',\n    id\n});\n\nexport const showRules = id => ({\n    type: 'SHOW_RULES',\n    id\n});\n\n\nexport const hideRules = id => ({\n    type: 'HIDE_RULES',\n    id\n});\n\nexport const setCurrentDifficulty = val => ({\n    type: 'SET_CURRENT_DIFFICULTY',\n    val\n});\n\nexport const updateTileDescription = (id, description) => ({\n    type: 'UPDATE_TILE_DESCRIPTION',\n    id,\n    description\n});","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass TileView extends Component {\n    render() {\n        let {tile, tileState, tileSize, edgeSize} = this.props;\n        let classes = [\"tile\", tile.tileType, tileState.valid ? \" valid\" : \" invalid\"];\n        if (tile.symbol) {\n            classes.push(\"symbol\");\n            classes.push(\"symbol-\" + tile.symbol);\n        }\n        return (\n            <div className={classes.join(\" \")} style={{\n                width: tileSize,\n                height: tileSize,\n                left: (tile.x1 * (tileSize + edgeSize)),\n                top: (tile.y1 * (tileSize + edgeSize)),\n                color: tile.color || \"black\"\n            }}>\n            </div>\n        );\n    }\n}\n\nTileView.propTypes = {\n    tile: PropTypes.shape({\n        tileType: PropTypes.string.isRequired,\n        x1: PropTypes.number.isRequired,\n        y1: PropTypes.number.isRequired,\n    }).isRequired,\n    tileState: PropTypes.shape({\n        valid: PropTypes.bool.isRequired,\n    }).isRequired,\n    tileSize: PropTypes.number.isRequired,\n    edgeSize: PropTypes.number.isRequired,\n};\n\n\nexport default TileView;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass EdgeView extends Component {\n    render() {\n        let {edge, edgeState, tileSize, edgeSize} = this.props;\n        if (edge.x1 === edge.x2) {\n            // vertical\n            return (\n                <div className={\"edge vertical\" + (edgeState.visited ? \" visited\" : \"\") + (edge.broken ? \" broken\" : \"\")} style={{\n                    width: edgeSize,\n                    height: tileSize,\n                    left: (edge.x1 * (tileSize + edgeSize) - edgeSize),\n                    top: (edge.y1 * (tileSize + edgeSize))\n                }}>\n                </div>\n            );\n        }\n        else {\n            return (\n                <div className={\"edge horizontal\" + (edgeState.visited ? \" visited\" : \"\") + (edge.broken ? \" broken\" : \"\")} style={{\n                    width: tileSize,\n                    height: edgeSize,\n                    left: (edge.x1 * (tileSize + edgeSize)),\n                    top: (edge.y1 * (tileSize + edgeSize) - edgeSize)\n                }}>\n                </div>\n            );\n        }\n    }\n}\n\nEdgeView.propTypes = {\n    edge: PropTypes.shape({\n        x1: PropTypes.number.isRequired,\n        y1: PropTypes.number.isRequired,\n        broken: PropTypes.bool.isRequired,\n    }).isRequired,\n    tileSize: PropTypes.number.isRequired,\n    edgeSize: PropTypes.number.isRequired,\n    edgeState: PropTypes.shape({\n        visited: PropTypes.bool.isRequired\n    }).isRequired\n};\n\nexport default EdgeView;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass VertexView extends Component {\n    render() {\n        let {vertex, vertexState, tileSize, edgeSize} = this.props;\n        if (vertex.vertexType === \"entry\") {\n            return (\n                <div className={'vertex ' + (vertex.vertexType || \"\") + (vertexState.visited ? \" visited\" : \"\")} style={{\n                    width: edgeSize * 3,\n                    height: edgeSize * 3,\n                    left: (vertex.x * (tileSize + edgeSize) - edgeSize - edgeSize),\n                    top: (vertex.y * (tileSize + edgeSize) - edgeSize - edgeSize)\n                }}>\n                </div>\n            );\n        }\n        else if (vertex.vertexType === \"exit\") {\n            return (\n                <div className={'vertex ' + (vertex.vertexType || \"\") + (vertexState.visited ? \" visited\" : \"\")} style={{\n                    width: edgeSize * 3,\n                    height: edgeSize * 3,\n                    left: (vertex.x * (tileSize + edgeSize) - edgeSize - edgeSize),\n                    top: (vertex.y * (tileSize + edgeSize) - edgeSize - edgeSize)\n                }}>\n                </div>\n            );\n        }\n        else {\n            return (\n                <div className={'vertex ' + (vertex.vertexType || \"\") + (vertexState.visited ? \" visited\" : \"\")} style={{\n                    width: edgeSize,\n                    height: edgeSize,\n                    left: (vertex.x * (tileSize + edgeSize) - edgeSize),\n                    top: (vertex.y * (tileSize + edgeSize) - edgeSize)\n                }}>\n\n                </div>\n            );\n        }\n\n    }\n}\n\nVertexView.propTypes = {\n    vertex: PropTypes.shape({\n        vertexType: PropTypes.string.isRequired,\n        x: PropTypes.number.isRequired,\n        y: PropTypes.number.isRequired,\n    }).isRequired,\n    tileSize: PropTypes.number.isRequired,\n    edgeSize: PropTypes.number.isRequired,\n    vertexState: PropTypes.shape({\n        visited: PropTypes.bool.isRequired\n    }).isRequired\n};\n\nexport default VertexView;","import { connect } from 'react-redux';\nimport * as Actions from './actions';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TileView from './TileView';\nimport EdgeView from './EdgeView';\nimport VertexView from './VertexView';\n\nclass GameBoard extends Component {\n    constructor() {\n        super();\n        this.onMouseDown = this.onMouseDown.bind(this);\n        this.onMouseMove = this.onMouseMove.bind(this);\n        this.onMouseUp = this.onMouseUp.bind(this);\n        this.state = {};\n        this.dragging = false;\n    }\n    componentDidMount() {\n        this.div.addEventListener(\"touchstart\", this.onMouseDown);\n        this.div.addEventListener(\"touchmove\", this.onMouseMove, {passive: false});\n        this.div.addEventListener(\"touchend\", this.onMouseUp);\n    }\n    onMouseDown(e) {\n        this.dragging = true;\n    }\n    onMouseMove(e) {\n        if (!this.dragging) return;\n        let {level, visitVertex, tileSize, edgeSize} = this.props;\n        let position, target;\n        if (e.targetTouches) {\n            position = e.targetTouches[0];\n            target = e.target;\n            e.preventDefault();\n        }\n        else {\n            position = e.nativeEvent;\n            target = e.nativeEvent.target;\n        }\n        if (!position || !target) return;\n\n        let x = (position.clientX - target.offsetLeft);\n        let y = (position.clientY - target.offsetTop);\n\n        // find nearest vertex\n\n        let col = Math.round(x / (tileSize + edgeSize)) - 1;\n        let row = Math.round(y / (tileSize + edgeSize)) - 1;\n        console.log(x + \", \" + y + \" => \" + col + \", \" + row);\n\n        if (col >= 0 && row >= 0 && row <= level.rows && col <= level.cols) {\n            let vertexId = row * (level.cols + 1) + col;\n            visitVertex(vertexId);\n        }\n    }\n    onMouseUp(e) {\n        if (!this.dragging) return;\n        this.dragging = false;\n        let {level, visitVertex, tileSize, edgeSize} = this.props;\n\n        let position, target;\n        if (e.targetTouches) {\n            position = e.targetTouches[0];\n            target = e.target;\n        }\n        else {\n            position = e.nativeEvent;\n            target = e.nativeEvent.target;\n        }\n        if (!position || !target) return;\n\n        let x = (position.clientX - target.offsetLeft);\n        let y = (position.clientY - target.offsetTop);\n\n        // find nearest vertex\n\n        let col = Math.round(x / (tileSize + edgeSize)) - 1;\n        let row = Math.round(y / (tileSize + edgeSize)) - 1;\n        console.log(x + \", \" + y + \" => \" + col + \", \" + row);\n\n        if (col >= 0 && row >= 0 && row <= level.rows && col <= level.cols) {\n            let vertexId = row * (level.cols + 1) + col;\n            visitVertex(vertexId);\n        }\n    }\n    render() {\n        let {level, tileSize, edgeSize, boardSize, vMargin, hMargin} = this.props;\n        if (!level || !level.tiles || !level.tiles[0]) {\n            return (\n                <div className=\"board\">\n          No game loaded;\n                </div>\n            );\n        }\n        else {\n            let overlay = null;\n            if (level.completed && !level.won) {\n                overlay = (\n                    <div className=\"boardOverlay\">\n\n                    </div>\n                );\n            }\n            else if (level.completed && level.won) {\n                overlay = (\n                    <div className=\"boardOverlay\">\n\n                    </div>\n                );\n            }\n            return (\n                <div\n                    className={\"board \" + (level.completed ? \" completed\" : \"\") + (level.won ? \" won\" : \"\") }\n                    ref={e => (this.div = e)}\n                    onMouseDown={this.onMouseDown}\n                    onMouseMove={this.onMouseMove}\n                    onMouseUp={this.onMouseUp}\n                    style={{\n                        marginTop: vMargin,\n                        marginBottom: vMargin,\n                        marginLeft: hMargin,\n                        marginRight: hMargin,\n                        width: boardSize,\n                        height: boardSize\n                    }}\n                >\n                    {level.tiles.map((t, i) => (<TileView\n                        key={i}\n                        tile={t}\n                        tileState={level.tileState[i]}\n                        tileSize={tileSize}\n                        edgeSize={edgeSize} />))}\n                    {level.edges.map((e, i) => (<EdgeView\n                        key={i}\n                        edge={e}\n                        edgeId={i}\n                        edgeState={level.edgeState[i]}\n                        tileSize={tileSize}\n                        edgeSize={edgeSize} />))}\n                    {level.vertices.map((v, i) => (<VertexView\n                        key={i}\n                        vertex={v}\n                        vertexId={i}\n                        vertexState={level.vertexState[i]}\n                        tileSize={tileSize}\n                        edgeSize={edgeSize} />))}\n                    {overlay}\n                </div>\n            );\n        }\n    }\n}\n\nGameBoard.propTypes = {\n    level: PropTypes.shape({\n\n    }).isRequired,\n    resetLevel: PropTypes.func.isRequired,\n    newGame: PropTypes.func.isRequired,\n    visitVertex: PropTypes.func.isRequired,\n    tileSize: PropTypes.number.isRequired,\n    edgeSize: PropTypes.number.isRequired,\n    boardSize: PropTypes.number.isRequired\n};\n\nexport default connect(\n    state => ({\n        // level: state.level,\n    }),\n    dispatch => ({\n        resetLevel: id => dispatch(Actions.resetLevel(id)),\n        newGame: id => dispatch(Actions.newGame(id)),\n        visitVertex: id => dispatch(Actions.visitVertex(id))\n    })\n)(GameBoard);","import { connect } from 'react-redux';\nimport * as Actions from './actions';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport GameBoard from './GameBoard';\n\nclass GameContainer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            tileSize: 50,\n            edgeSize: 10\n        };\n        this.updateSize = this.updateSize.bind(this);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (!state.level || !props.level) {\n            return {\n                nextLevel: null,\n                level: props.level,\n                prevLevel: null\n            };\n        }\n\n        if (state.level && props.level && state.level.levelId !== props.level.levelId) {\n            // resetting to new level\n            console.log(\"resetting\");\n            return {\n                nextLevel: props.level,\n                level: null,\n                prevLevel: state.level\n            };\n        }\n\n        if (!state.level.completed && props.level.completed) {\n            if (props.level.won) {\n                setTimeout(() => props.newGame(), 500);\n            }\n            else {\n                setTimeout(() => props.resetLevel(), 1000);\n            }\n        }\n\n        return {\n            nextLevel: null,\n            level: props.level,\n            prevLevel: null\n        };\n    }\n    updateSize() {\n        if (!this.div) return;\n        let r = this.div.getBoundingClientRect();\n        let boardSize = Math.min(Math.min(r.width, r.height) - 20, 600);\n        let edgeSize = boardSize / 60;\n        let tileSize = (boardSize / (this.props.level.cols + 2)) - edgeSize;\n        this.setState({\n            boardSize: boardSize,\n            vMargin: (r.height - boardSize) / 2,\n            hMargin: (r.width - boardSize) / 2,\n            tileSize: tileSize,\n            edgeSize: edgeSize\n        });\n    }\n    componentDidMount() {\n        this.updateSize();\n        window.addEventListener(\"resize\", this.updateSize);\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateSize);\n    }\n    render() {\n        let {level, prevLevel, nextLevel, tileSize, edgeSize, boardSize, vMargin, hMargin} = this.state;\n        return (\n            <div className=\"boardcontainer\" ref={e => (this.div = e)} onClick={this.onClick}>\n                {(prevLevel ? (<div className=\"prevLevel\"><GameBoard level={prevLevel} {...{tileSize, edgeSize, boardSize, vMargin, hMargin}} /></div>) : null)}\n                {(level ? (<div className=\"currentLevel\"><GameBoard level={level} {...{tileSize, edgeSize, boardSize, vMargin, hMargin}} /></div>) : null)}\n                {(nextLevel ? (<div className=\"nextLevel\"><GameBoard level={nextLevel} {...{tileSize, edgeSize, boardSize, vMargin, hMargin}} /></div>) : null)}\n\n            </div>\n        );\n\n    }\n}\n\nGameContainer.propTypes = {\n    level: PropTypes.shape({\n    }),\n};\n\nexport default connect(\n    state => ({\n        level: state.level,\n    }),\n    dispatch => ({\n        resetLevel: id => dispatch(Actions.resetLevel(id)),\n        newGame: id => dispatch(Actions.newGame(id)),\n        visitVertex: id => dispatch(Actions.visitVertex(id))\n    })\n)(GameContainer);","import { connect } from 'react-redux';\nimport * as Actions from './actions';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass GameMenu extends Component {\n    render() {\n        let {newGame, resetLevel, showLevelSelect, showRules, progress} = this.props;\n        return (\n            <div className=\"menu\">\n                <button onClick={() => newGame()}>New Game</button>\n                <button onClick={() => resetLevel()}>Retry</button>\n                <button onClick={() => showLevelSelect()}>Level {progress.currentDifficulty}</button>\n                <button onClick={() => showRules()}>Rules</button>\n            </div>\n        );\n    }\n}\n\nGameMenu.propTypes = {\n    level: PropTypes.shape({\n    }),\n    progress: PropTypes.shape({\n    }),\n    resetLevel: PropTypes.func.isRequired,\n    newGame: PropTypes.func.isRequired,\n    showRules: PropTypes.func.isRequired,\n    showLevelSelect: PropTypes.func.isRequired\n};\n\nexport default connect(\n    state => ({\n        progress: state.progress,\n        level: state.level\n    }),\n    dispatch => ({\n        resetLevel: id => dispatch(Actions.resetLevel(id)),\n        newGame: id => dispatch(Actions.newGame(id)),\n        showLevelSelect: id => dispatch(Actions.showLevelSelect(id)),\n        showRules: id => dispatch(Actions.showRules(id)),\n    })\n)(GameMenu);","import { connect } from 'react-redux';\nimport * as Actions from './actions';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass TileDescription extends Component {\n    static propTypes = {\n        tileSpec: PropTypes.shape({\n        }),\n        updateTileDescription: PropTypes.func.isRequired\n    }\n    render() {\n        let {tileSpec, updateTileDescription} = this.props;\n        return (\n            <div className=\"rulesrow\">\n                <div className={\"tile symbol symbol-\" + tileSpec.symbol} ></div>\n                <textarea\n                    value={tileSpec.description}\n                    onChange={(e) => {\n                        updateTileDescription(e.target.value);\n                    }}\n                    placeholder=\"Tap to edit when you know the rules\"\n                />\n            </div>\n        );\n    }\n}\n\nclass RulesPage extends Component {\n    render() {\n        let {hideRules, visible, progress, updateTileDescription} = this.props;\n        return (\n            <div className={\"modalpage \" + (visible ? \"visible\" : \"hidden\")}>\n                <div className=\"contentbox\">\n                    <h1>Rules</h1>\n                    <p style={{\n                        maxWidth: 550,\n                        margin: \"auto\",\n                        marginBottom: 50\n                    }}>\n                        Draw a line from the start to the finish, separating the board into regions matching\n                        the tile rules below.\n                    </p>\n\n                    {progress.tileTypes.map((tileSpec, i) => (\n                        <TileDescription\n                            key={i}\n                            tileSpec={tileSpec}\n                            updateTileDescription={(description) => updateTileDescription(i, description)}\n                        />\n                    ))}\n\n                    <button className=\"donebutton\" onClick={() => hideRules()}>Done</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nRulesPage.propTypes = {\n    progress: PropTypes.shape({\n    }),\n    visible: PropTypes.bool.isRequired,\n    hideRules: PropTypes.func.isRequired,\n    updateTileDescription: PropTypes.func.isRequired\n};\n\nexport default connect(\n    state => ({\n        progress: state.progress,\n        visible: state.rulesShown\n    }),\n    dispatch => ({\n        hideRules: id => dispatch(Actions.hideRules(id)),\n        updateTileDescription: (id, description) => dispatch(Actions.updateTileDescription(id, description))\n    })\n)(RulesPage);","import { connect } from 'react-redux';\nimport * as Actions from './actions';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass TileDescription extends Component {\n    static propTypes = {\n        progress: PropTypes.shape({\n        }),\n        setCurrentDifficulty: PropTypes.func.isRequired\n    }\n    render() {\n        let {tileSpec, setCurrentDifficulty, difficulty, selected} = this.props;\n        return (\n            <div className={\"rulesrow\" + (selected ? \" selected\" : \"\")} onClick={() => setCurrentDifficulty(difficulty)}>\n                <div className={\"tile symbol symbol-\" + tileSpec.symbol} ></div>\n            Level {difficulty}\n            </div>\n        );\n    }\n}\n\nclass UnlockRow extends Component {\n    static propTypes = {\n        progress: PropTypes.shape({\n        }),\n    }\n    render() {\n        let {progress} = this.props;\n        if (progress.winsToNextUnlock <= 0) return null;\n\n        return (\n            <div className={\"rulesrow\"}>\n                <div className={\"tile symbol symbol-lock\"} ></div>\n                    Win {progress.winsToNextUnlock} more games on level {progress.maxDifficulty} to unlock\n            </div>\n        );\n    }\n}\n\n\nclass LevelSelect extends Component {\n    render() {\n        let {hideLevelSelect, setCurrentDifficulty, visible, progress} = this.props;\n        return (\n            <div className={\"modalpage \" + (visible ? \"visible\" : \"hidden\")}>\n                <div className=\"contentbox\">\n                    <h1>Select a level</h1>\n                    {progress.tileTypes.map((tileSpec, i) => (<TileDescription key={i} selected={progress.currentDifficulty === i + 1} difficulty={i + 1} tileSpec={tileSpec} setCurrentDifficulty={setCurrentDifficulty} />))}\n                    <UnlockRow progress={progress} />\n                </div>\n            </div>\n        );\n    }\n}\n\nLevelSelect.propTypes = {\n    progress: PropTypes.shape({\n    }),\n    visible: PropTypes.bool.isRequired,\n    hideLevelSelect: PropTypes.func.isRequired\n};\n\nexport default connect(\n    state => ({\n        progress: state.progress,\n        visible: state.levelSelectShown\n    }),\n    dispatch => ({\n        setCurrentDifficulty: val => dispatch(Actions.setCurrentDifficulty(val)),\n        hideLevelSelect: id => dispatch(Actions.hideLevelSelect(id))\n    })\n)(LevelSelect);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport * as Actions from './actions';\nimport GameContainer from './GameContainer';\nimport GameMenu from './GameMenu';\nimport RulesPage from './RulesPage';\nimport LevelSelect from './LevelSelect';\n\nclass App extends Component {\n    componentDidMount() {\n        let {progress, loadProgress} = this.props;\n        if (!progress) {\n            loadProgress();\n        }\n    }\n    render() {\n        let {progress} = this.props;\n\n        if (!progress) return null;\n        return (\n            <div className=\"App\" style={{\n            }}>\n                <GameContainer />\n                <GameMenu />\n                <RulesPage />\n                <LevelSelect />\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    state => ({\n        progress: state.progress,\n    }),\n    dispatch => ({\n        loadProgress: id => dispatch(Actions.loadProgress(id))\n    })\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","export const tileTypes = {\n    blank: {\n        validate: () => true\n    },\n    paired: {\n        generateSubtype: (symbol) => {\n            return {\n                tileType: \"paired\",\n                groupSize: Math.floor(Math.random() * 5 + 1),\n                symbol\n            };\n        },\n        place: (tileSpec, regions, tiles) => {\n            console.log(\"placing paired tiles\");\n            // at least two colors, up to the number of regions\n            let availableColors = [\"black\", \"white\", \"orange\", \"blue\", \"green\", \"purple\", \"yellow\"]\n                .map((a) => [Math.random(), a])\n                .sort((a, b) => a[0] - b[0])\n                .map((a) => a[1]);\n            let colorCount = Math.min(availableColors.length, Math.floor(Math.random() * (regions.length - 2) + 2));\n\n            for (let i = 0; i < colorCount; i++) {\n                let color = availableColors[i];\n                let availableRegions = [...regions.keys()].filter(regionId => {\n                    let region = regions[regionId];\n                    // reject regions which already contain a pair\n                    if (region.some(id => {\n                        return tiles[id].tileType === \"paired\" && tiles[id].color === color;\n                    })) return false;\n                    // need at least groupSize free tiles\n                    if (region.filter(id => {\n                        return tiles[id].tileType === \"blank\";\n                    }).length < tileSpec.groupSize) return false;\n                    return true;\n                });\n\n                let regionCount = Math.min(availableRegions.length, Math.floor(Math.random() * (regions.length - 2) + 2));\n\n                for (let j = 0; j < regionCount; j++) {\n                    if (availableRegions.length === 0) continue;\n\n                    let ri = Math.floor(Math.random() * availableRegions.length);\n                    let regionId = availableRegions[ri];\n                    availableRegions.splice(ri, 1);\n                    let region = regions[regionId];\n                    for (let k = 0; k < tileSpec.groupSize; k++) {\n                        let availableTiles = region.filter(id => {\n                            return tiles[id].tileType === \"blank\";\n                        });\n                        let tile = tiles[availableTiles[Math.floor(Math.random() * availableTiles.length)]];\n                        tile.tileType = \"paired\";\n                        tile.color = color;\n                        tile.groupSize = tileSpec.groupSize;\n                        tile.symbol = tileSpec.symbol;\n                    }\n                }\n            }\n        },\n        validate: (tileId, region, tiles, tileState) => {\n            let tile = tiles[tileId];\n            let matchesInRegion = region.filter(id => {\n                let otherTile = tiles[id];\n                if (tile.tileType === otherTile.tileType && tile.color === otherTile.color) {\n                    return true;\n                }\n                return false;\n            });\n            return matchesInRegion.length === tile.groupSize;\n        }\n    },\n    sameColor: {\n        place: (tileSpec, regions, tiles) => {\n            console.log(\"placing sameColor tiles\");\n            // at least two colors, up to the number of regions\n            let availableColors = [\"black\", \"white\", \"orange\", \"blue\", \"green\", \"purple\", \"yellow\"]\n                .map((a) => [Math.random(), a])\n                .sort((a, b) => a[0] - b[0])\n                .map((a) => a[1]);\n            let colorCount = Math.min(availableColors.length, Math.floor(Math.random() * (regions.length - 2) + 2));\n\n            console.log(\"placing sameColor tiles - \" + colorCount);\n\n            let unclaimedRegions = [...regions.keys()];\n            for (let i = 0; i < colorCount; i++) {\n                let ri = Math.floor(Math.random() * unclaimedRegions.length);\n                let regionId = unclaimedRegions[ri];\n                unclaimedRegions.splice(ri, 1);\n                let region = regions[regionId];\n                let maxInRegion = Math.ceil(region.length / 2);\n                let minInRegion = 1;\n                let countInRegion = Math.floor(Math.random() * (maxInRegion - minInRegion) + minInRegion);\n                for (let j = 0; j < countInRegion; j++) {\n                    let tile = tiles[region[Math.floor(Math.random() * region.length)]];\n                    if (tile.tileType !== \"blank\") continue;\n                    tile.tileType = \"sameColor\";\n                    tile.color = availableColors[i];\n                    tile.symbol = tileSpec.symbol;\n                }\n\n            }\n\n        },\n        validate: (tileId, region, tiles, tileState) => {\n            let tile = tiles[tileId];\n            let conflicts = region.filter(id => {\n                if (id === tileId) return false;\n                let otherTile = tiles[id];\n                if (tile.tileType === otherTile.tileType && tile.color !== otherTile.color) {\n                    return true;\n                }\n                return false;\n            });\n            if (conflicts.length > 0) {\n                console.log(\"failed on tile \" + tileId);\n                console.log(tile);\n                console.log(region);\n                console.log(conflicts);\n                console.log(tiles[conflicts[0]]);\n\n            }\n            return conflicts.length === 0;\n        }\n    }\n};\n\nexport const allSymbols = [\"tree\", \"drop\", \"square\", \"circle\", \"diamond\", \"octagon\", \"blob\", \"sun\", \"react\"];\n\n\nfunction neighbouringVertices(vertexId, edges) {\n    return edges.filter((e, i) => {\n        if (e.vertices.length < 2) return false;\n        if (e.vertices[0] === vertexId || e.vertices[1] === vertexId) return true;\n        else return false;\n    }).map((e, i) => {\n        if (e.vertices[0] === vertexId) return e.vertices[1];\n        else return e.vertices[0];\n    });\n}\n\nexport function getVisitedEdges(path, edges) {\n    let visitedEdges = [];\n    for (let i = 0; i < edges.length; i++) {\n        let pi1 = path.indexOf(edges[i].vertices[0]);\n        let pi2 = path.indexOf(edges[i].vertices[1]);\n        if (pi1 >= 0 && pi2 >= 0 && Math.abs(pi2 - pi1) === 1) {\n            visitedEdges.push(i);\n        }\n    }\n    return visitedEdges;\n}\n\n\nfunction expandRegion(startTile, region, unmatchedTiles, tiles, edges, visitedEdges) {\n    unmatchedTiles.splice(unmatchedTiles.indexOf(startTile), 1);\n    region.push(startTile);\n    let neighbours = edges.filter((e, i) => {\n        if (e.tiles.length < 2) return false;\n        if (visitedEdges.indexOf(i) >= 0) return false;\n        let otherTile;\n        if (e.tiles[0] === startTile) otherTile = e.tiles[1];\n        else if (e.tiles[1] === startTile) otherTile = e.tiles[0];\n        else return false;\n        if (unmatchedTiles.indexOf(otherTile) < 0) return false;\n        return true;\n    }).map((e, i) => {\n        if (e.tiles[0] === startTile) return e.tiles[1];\n        else return e.tiles[0];\n    });\n    for (let t of neighbours) {\n    // tile may have matched since the filtering step\n        if (unmatchedTiles.indexOf(t) < 0) continue;\n        expandRegion(t, region, unmatchedTiles, tiles, edges, visitedEdges);\n    }\n}\n\nexport function calculateRegions(tiles, edges, visitedEdges) {\n    let unmatchedTiles = tiles.map((e, i) => i);\n    let regions = [];\n    while (unmatchedTiles.length > 0) {\n        let region = [];\n        expandRegion(unmatchedTiles[0], region, unmatchedTiles, tiles, edges, visitedEdges);\n        regions.push(region);\n    }\n\n    return regions;\n}\n\n\nfunction randomPath(path, vertices, edges, tiles) {\n    if (vertices[path[path.length - 1]].vertexType === \"exit\") {\n    // this may be a valid solution\n        let visitedEdges = getVisitedEdges(path, edges);\n\n        let solution = {\n            path: path,\n            length: path.length,\n            regions: calculateRegions(tiles, edges, visitedEdges),\n            edges: visitedEdges\n\n        };\n        if (solution.regions.length < 4) return null;\n        return solution;\n    }\n\n    // otherwise, see if a random edge leads to a solution\n\n    // all unvisited neighbours\n    let nextPoints = vertices[path[path.length - 1]].neighbours.filter(v => path.indexOf(v) < 0);\n    if (nextPoints.length === 0) {\n    // dead end\n        return null;\n    }\n    let shouldBacktrack = Math.random() > 0.5 && path.length > 1;\n    let foundSolution;\n\n    while (!shouldBacktrack && !foundSolution) {\n        let nextVertexId = nextPoints[Math.floor(Math.random() * nextPoints.length)];\n        let newPath = [...path, nextVertexId];\n        foundSolution = randomPath(newPath, vertices, edges, tiles);\n        if (foundSolution) return foundSolution;\n        shouldBacktrack = Math.random() > 0.5 && path.length > 1;\n    }\n    return null;\n}\n\n\nexport function generateLevel(rows, cols, progress) {\n    console.log(progress);\n    let level = {\n        name: \"Generated Level\",\n        levelId: Math.floor(Math.random() * 10000000),\n        difficulty: progress.currentDifficulty,\n        rows: rows,\n        cols: cols,\n        // 8x8\n        tiles: [],\n        // 8h, 9v\n        edges: [],\n        // 9x9\n        vertices: [],\n        path: [],\n        completed: false,\n        won: false,\n    };\n\n    for (let i = 0; i <= rows; i++) {\n        for (let j = 0; j <= cols; j++) {\n            let vertex = {\n                x: j + 1,\n                y: i + 1,\n                vertexType: \"standard\"\n            };\n            level.vertices.push(vertex);\n        }\n    }\n\n    for (let row = 0; row <= rows; row++) {\n    // add top edge\n        for (let col = 0; col < cols; col++) {\n            let topEdge = {\n                x1: col + 1,\n                y1: row + 1,\n                x2: col + 2,\n                y2: row + 1,\n                broken: false,\n                tiles: [],\n                vertices: [\n                    (row) * (cols + 1) + col,\n                    (row) * (cols + 1) + col + 1]\n            };\n            if (row > 0) {\n                topEdge.tiles.push((row - 1) * cols + col);\n            }\n            if (row < rows) {\n                topEdge.tiles.push((row) * cols + col);\n            }\n            level.edges.push(topEdge);\n        }\n\n        // add left side if not below last row\n        if (row < rows) {\n            for (let col = 0; col <= cols; col++) {\n                let leftEdge = {\n                    x1: col + 1,\n                    y1: row + 1,\n                    x2: col + 1,\n                    y2: row + 2,\n                    broken: false,\n                    tiles: [],\n                    vertices: [\n                        (row) * (cols + 1) + col,\n                        (row + 1) * (cols + 1) + col]\n                };\n                if (col > 0) {\n                    leftEdge.tiles.push((row) * cols + col - 1);\n                }\n                if (col < cols) {\n                    leftEdge.tiles.push((row) * cols + col);\n                }\n                level.edges.push(leftEdge);\n            }\n        }\n    }\n\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            let tile = {\n                tileType: \"blank\",\n                x1: j + 1,\n                y1: i + 1,\n                x2: j + 2,\n                y2: i + 2\n            };\n            level.tiles.push(tile);\n        }\n    }\n\n\n    for (let i = 0; i < level.vertices.length; i++) {\n        level.vertices[i].neighbours = neighbouringVertices(i, level.edges);\n    }\n\n\n    // add an entry\n    let entries = [Math.floor((rows + 1) * (cols + 1) - cols / 2 - 1)];\n\n    for (let i = 0; i < entries.length; i++) {\n        level.vertices[entries[i]].vertexType = \"entry\";\n    }\n\n\n    // add an exit\n    let exits = [Math.floor(cols / 2)];\n\n    for (let i = 0; i < exits.length; i++) {\n        level.vertices[exits[i]].vertexType = \"exit\";\n    }\n\n\n    // let solutions = [];\n\n\n    //  for (let i = 0; i < entries.length; i++) {\n    //    extendPath([entries[i]], level.vertices, level.edges, solutions)\n    //  }\n\n    let solution = randomPath([entries[0]], level.vertices, level.edges, level.tiles);\n\n    for (let i = 0; i < solution.regions.length; i++) {\n        for (let j = 0; j < solution.regions[i].length; j++) {\n            level.tiles[solution.regions[i][j]].solutionRegion = i;\n        }\n    }\n\n    let minBreaks = 5;\n    let maxBreaks = 20;\n    let breaks = Math.floor(Math.random() * (maxBreaks - minBreaks) + minBreaks);\n    // add random broken edges\n    for (let i = 0; i < breaks; i++) {\n        let edgeId = Math.floor(Math.random() * level.edges.length);\n        if (solution.edges.indexOf(edgeId) >= 0) continue;\n        console.log(\"breaking edge \" + edgeId);\n        level.edges[edgeId].broken = true;\n    }\n\n    // add tiles\n\n    for (let i = 0; i < progress.tileTypes.length && i < level.difficulty; i++) {\n        let tileSpec = progress.tileTypes[i];\n        tileTypes[tileSpec.tileType].place(tileSpec, solution.regions, level.tiles, tileSpec);\n    }\n\n    level.edgeState = level.edges.map(e => ({\n        visited: false\n    }));\n\n    level.vertexState = level.vertices.map(e => ({\n        visited: false\n    }));\n\n    level.tileState = level.tiles.map(e => ({\n        valid: true\n    }));\n\n    level.regions = [level.tiles.map((e, i) => (i))];\n\n    // for testing\n\n    level.vertexState[entries[0]].visited = true;\n    level.path = [entries[0]];\n    level.solution = solution;\n    level.entries = entries;\n    level.exits = exits;\n\n    return level;\n}\n\nexport function generateTileType(progress) {\n    let usedSymbols = progress.tileTypes.map(t => t.symbol);\n    let availableSymbols = allSymbols.filter(s => usedSymbols.indexOf(s) < 0);\n    let symbol = availableSymbols[Math.floor(Math.random() * availableSymbols.length)];\n\n    let availableTypes = Object.keys(tileTypes).filter(t => !!tileTypes[t].generateSubtype);\n\n    let type = tileTypes[availableTypes[Math.floor(Math.random() * availableTypes.length)]];\n    return type.generateSubtype(symbol);\n}\n\n","import { generateLevel, getVisitedEdges, tileTypes, calculateRegions, generateTileType, allSymbols } from './game';\n\n\n\n\nlet initialProgress = {\n    tileTypes: [\n        {\n            tileType: \"paired\",\n            groupSize: 2,\n            symbol: \"diamond\",\n            description: \"Must be matched with one other of the same color\"\n        },\n        {\n            tileType: \"sameColor\",\n            symbol: \"drop\",\n            description: \"Must not share a region with one of a different color\"\n        }\n    ],\n    currentDifficulty: 2,\n    maxDifficulty: 2,\n    winsToNextUnlock: 1\n};\n\nexport const initialState = {\n    // progress: initialProgress,\n    level: {\n        ...generateLevel(6, 6, initialProgress),\n    },\n    levelSelectShown: false,\n    rulesShown: false\n};\n\nfunction persistProgress(progress) {\n    localStorage.setItem(\"progress\", JSON.stringify(progress));\n}\n\nexport const reducer = (state = initialState, action) => {\n    console.log(action.type);\n\n    switch (action.type) {\n    case 'RECEIVE_PROGRESS': {\n        let progress = action.progress || initialProgress;\n        return {\n            ...state,\n            progress,\n            level: {\n                ...generateLevel(6, 6, progress),\n            }\n        };\n    }\n    case 'UPDATE_TILE_DESCRIPTION': {\n        console.log(action);\n        let progress = {\n            ...state.progress,\n            tileTypes: [...state.progress.tileTypes]\n        };\n\n        progress.tileTypes[action.id] = {\n            ...progress.tileTypes[action.id],\n            description: action.description,\n        };\n\n        persistProgress(progress);\n\n        return {\n            ...state,\n            progress\n        };\n    }\n    case 'SHOW_LEVEL_SELECT': {\n        return {\n            ...state,\n            levelSelectShown: true\n        };\n    }\n    case 'HIDE_LEVEL_SELECT': {\n        return {\n            ...state,\n            levelSelectShown: false\n        };\n    }\n    case 'SHOW_RULES': {\n        return {\n            ...state,\n            rulesShown: true\n        };\n    }\n    case 'HIDE_RULES': {\n        return {\n            ...state,\n            rulesShown: false\n        };\n    }\n    case 'SET_CURRENT_DIFFICULTY': {\n        if (action.val === state.progress.currentDifficulty) return {\n            ...state,\n            levelSelectShown: false,\n        };\n        let progress = {\n            ...state.progress,\n            currentDifficulty: action.val,\n        };\n        return {\n            ...state,\n            progress,\n            level: {\n                ...state.level,\n                ...generateLevel(6, 6, progress),\n            },\n            levelSelectShown: false,\n        };\n    }\n    case 'NEW_GAME':\n        return {\n            ...state,\n            level: {\n                ...state.level,\n                ...generateLevel(6, 6, state.progress),\n            }\n        };\n    case 'RESET_LEVEL':\n        return {\n            ...state,\n            level: {\n                ...state.level,\n                edgeState: state.level.edges.map(e => ({\n                    visited: false\n                })),\n\n                vertexState: state.level.vertices.map((e, i) => ({\n                    visited: i === state.level.entries[0]\n                })),\n\n                tileState: state.level.tiles.map(e => ({\n                    valid: true\n                })),\n\n                regions: [state.level.tiles.map((e, i) => (i))],\n\n                path: [state.level.entries[0]],\n\n                completed: false,\n\n                won: false,\n            }\n\n        };\n    case 'VISIT_VERTEX': {\n        console.log(action.type);\n        console.log(action.id);\n        let vertexId = action.id;\n        let vertexState = [...state.level.vertexState];\n        vertexState[vertexId] = {...vertexState[vertexId]};\n        let vertex = state.level.vertices[vertexId];\n        let path = [...state.level.path];\n        let completed = false;\n        let won = false;\n\n        if (!vertex) return state;\n        // no need to keep going once completed\n        if (state.level.completed) return state;\n\n        let lastVertexId = path[path.length - 1];\n        let backtrackVertexId = path[path.length - 2];\n\n        let edgeId = state.level.edges.findIndex(e => {\n            return e.vertices.indexOf(vertexId) >= 0\n          && e.vertices.indexOf(lastVertexId) >= 0\n          && !e.broken;\n        });\n        let edge = state.level.edges[edgeId];\n        console.log(\"Found edge \" + edgeId);\n        console.log(edge);\n\n        // if path is empty, must visit a start point\n        if (path.length === 0 && vertex.vertexType !== \"entry\") {\n            return state;\n        }\n        // if path has only entry point, visiting another entry starts a new path\n        else if (path.length === 1 && vertex.vertexType === \"entry\") {\n            path = [vertexId];\n            vertexState = state.level.vertices.map(e => ({\n                visited: false\n            }));\n            vertexState[vertexId].visited = true;\n        }\n        // restart level by visiting entry point when not on a neighbouring vertex\n        else if (vertex.vertexType === \"entry\" && !edge) {\n            path = [vertexId];\n            vertexState = state.level.vertices.map(e => ({\n                visited: false\n            }));\n            vertexState[vertexId].visited = true;\n        }\n        // backtrack\n        else if (vertexId === backtrackVertexId) {\n            vertexState[path.pop()] = {\n                visited: false\n            };\n        }\n        else if (vertexState[vertexId].visited) {\n        // can't visit twice\n            return state;\n        }\n        else if (path.length > 0 && !edge) {\n        // no valid edge\n            return state;\n        }\n        else {\n        // visiting a new vertex\n            vertexState[vertexId].visited = true;\n            path.push(vertexId);\n            if (vertex.vertexType === \"exit\") {\n                // level completed - check if won\n                completed = true;\n            }\n\n        }\n\n\n\n        let visitedEdges = getVisitedEdges(path, state.level.edges);\n        let edgeState = state.level.edgeState.map((e, i) => {\n            if (visitedEdges.indexOf(i) >= 0) {\n                return {\n                    visited: true\n                };\n            }\n            else {\n                return {\n                    visited: false\n                };\n            }\n        });\n\n        let regions = calculateRegions(state.level.tiles, state.level.edges, visitedEdges);\n        //console.log(\"Current regions: \")\n        //console.log(regions);\n        // now validate the regions against the rules for each file\n        won = true;\n\n        let tileState = state.level.tiles.map((t, i) => {\n            return {\n                ...state.level.tileState[i],\n                valid: true\n            };\n        });\n\n        for (let i = 0; i < regions.length; i++) {\n        // validate each region's tiles. if any is invalid, mutate tileState and set won to false;\n            for (let t of regions[i]) {\n                tileState[t].region = i;\n                let tv = tileTypes[state.level.tiles[t].tileType].validate(t, regions[i], state.level.tiles, tileState);\n                if (!tv) won = false;\n                tileState[t].valid = tv;\n            }\n        }\n\n\n\n        let newState = {\n            ...state,\n            level: {\n                ...state.level,\n                vertexState,\n                edgeState,\n                tileState,\n                path,\n                completed,\n                won,\n                regions\n            }\n        };\n\n        if (won && completed && state.level.difficulty === state.progress.maxDifficulty) {\n            let progress = newState.progress = {...state.progress};\n            progress.winsToNextUnlock--;\n            if (progress.winsToNextUnlock <= 0) {\n                if (progress.tileTypes.length < allSymbols.length - 1) {\n                    progress.winsToNextUnlock = 10;\n                    progress.maxDifficulty++;\n                    progress.currentDifficulty++;\n                    progress.tileTypes = [...progress.tileTypes, generateTileType(progress)];\n                    persistProgress(progress);\n                }\n            }\n        }\n\n        return newState;\n    }\n    default:\n        return state;\n    }\n};\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { reducer } from './store';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}