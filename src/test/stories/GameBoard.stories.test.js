///////////////////
// AUTO GENERATED by createTests.ts
// This is the storyshot for the story file
// One test file per story to help test watching
///////////////////

import { render } from '@testing-library/react';
import initStoryshots from '@storybook/addon-storyshots';

const reactTestingLibrarySerializer = {
  print: (val, serialize, indent) => serialize(val.container.firstChild),
  test: (val) => val && val.hasOwnProperty('container'),
};

initStoryshots({
  renderer: render,
  snapshotSerializers: [reactTestingLibrarySerializer],
  storyKindRegex: /GameBoard/,
  test: ({ story }) => {
    const warn = jest.spyOn(global.console, 'warn');
    const error = jest.spyOn(global.console, 'error');

    let result;

    try {
      result = render(story.storyFn(), {});

      expect(result.asFragment()).toMatchSnapshot();

      if (story.parameters.ignoreConsoleErrors !== true) {
        // Check that no errors/warnings were logged
        expect(error).not.toHaveBeenCalled();
        expect(warn).not.toHaveBeenCalled();
      }

      // run any custom tests defined on the story
      if (story.parameters.tests) {
        story.parameters.tests.forEach(([n, f]) => {
          f(result);
        });
      }
    } finally {
      // Cleanup
      error.mockReset();
      error.mockRestore();
      warn.mockReset();
      warn.mockRestore();
    }
  },
});
